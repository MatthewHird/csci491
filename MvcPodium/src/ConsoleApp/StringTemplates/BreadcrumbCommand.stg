import "CSharpCommon.stg"


BreadcrumbServiceFile(usingDirectives, breadcrumbNamespace, breadcrumbDeclaration) ::= <<
<UsingDirectives(usingDirectives)>
<BreadcrumbNamespaceDeclaration(breadcrumbNamespace, breadcrumbDeclaration)><\n>
>>


BreadcrumbNamespaceDeclaration(breadcrumbNamespace, breadcrumbDeclaration) ::= <<
<NamespaceDeclaration(breadcrumbNamespace)>
{
    <if(breadcrumbDeclaration.IsInterface)><
BreadcrumbInterfaceDeclaration(
    breadcrumbDeclaration.Attributes,
    breadcrumbDeclaration.Modifiers,
    breadcrumbDeclaration.Identifier,
    breadcrumbDeclaration.TypeParameters,
    breadcrumbDeclaration.Base,
    breadcrumbDeclaration.Body)
><\n><else><
BreadcrumbClassDeclaration(
    breadcrumbDeclaration.Attributes,
    breadcrumbDeclaration.Modifiers,
    breadcrumbDeclaration.Identifier,
    breadcrumbDeclaration.TypeParameters,
    breadcrumbDeclaration.Base,
    breadcrumbDeclaration.Body)
><\n><endif>}
>>


BreadcrumbClassDeclaration(attributes, modifiers, identifier, typeParameters, base, body) ::= <<
<if(attributes)><attributes><\n><endif><\\>
<modifiers:{modifier|<modifier> }>class <identifier><\\>
<TypeParamList(typeParameters)><ClassBase(base.ClassType, base.InterfaceTypeList)><\\>
<TypeParamConstraints(typeParameters)><\n><\\>
<BreadcrumbClassBody(
    body.FieldDeclarations,
    body.ConstructorDeclaration,
    body.MethodDeclarations)
>
>>


BreadcrumbClassBody(fieldDeclarations, constructorDeclaration, breadcrumbMethods) ::= <<
{<if(fieldDeclarations)><fieldDeclarations:{field|
    <
FieldDeclaration(
    field.Attributes,
    field.Modifiers,
    field.Type,
    field.VariableDeclarator)
>}><\n>
<endif><if(constructorDeclaration)>
    <
ConstructorDeclaration(
    constructorDeclaration.Attributes,
    constructorDeclaration.Modifiers,
    constructorDeclaration.Identifier,
    constructorDeclaration.FormalParameterList,
    constructorDeclaration.ConstructorInitializer,
    constructorDeclaration.Body)
><\n>
<endif><breadcrumbMethods:{method|
    <
BreadcrumbClassMethodDeclaration(
    method.ControllerRoot,
    method.Action,
    method.HasId,
    method.Controller,
    method.ControllerNamePattern)
><\n>}>}
>>


BreadcrumbClassMethodDeclaration(controllerRoot, action, hasId, controller, controllerNamePattern) ::= <<
public MvcBreadcrumbNode <controllerRoot><action>Breadcrumb(<if(hasId)>int? id<endif>)<\n><\\>
{
    return new MvcBreadcrumbNode(
        nameof(<controller>.<action>),
        <controllerNamePattern>,
        "<controller>.<action>")
    {
        Parent = null<if(hasId)>,<\n>        RouteValues = new { id }<endif>
    };
}
>>


BreadcrumbInterfaceDeclaration(attributes, modifiers, identifier, typeParameters, base, body) ::= <<
<if(attributes)><attributes><\n><endif><\\>
<modifiers:{modifier|<modifier> }>interface <identifier><\\>
<VariantTypeParamList(typeParameters)><InterfaceBase(base.InterfaceTypeList)><\\>
<TypeParamConstraints(typeParameters)><\n><\\>
<BreadcrumbInterfaceBody(
    body.FieldDeclarations,
    body.ConstructorDeclaration,
    body.MethodDeclarations)
>
>>


BreadcrumbInterfaceBody(fieldDeclarations, constructorDeclaration, breadcrumbMethods) ::= <<
{<breadcrumbMethods:{method|<\n>    <
BreadcrumbInterfaceMethodDeclaration(
    method.ControllerRoot,
    method.Action,
    method.HasId,
    method.Controller,
    method.ControllerNamePattern)
><\n>}>}
>>


BreadcrumbInterfaceMethodDeclaration(controllerRoot, action, hasId, controller, controllerNamePattern) ::= <<
MvcBreadcrumbNode <controllerRoot><action>Breadcrumb(<if(hasId)>int? id = null<endif>);
>>


BreadcrumbAssignment(controllerRoot, action, hasId) ::= <<
ViewData["BreadcrumbNode"] = _breadcrumbService.<controllerRoot><action>Breadcrumb(<if(hasId)>id<endif>);
>>
