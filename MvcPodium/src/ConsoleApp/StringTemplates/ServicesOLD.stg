// rootNamespace                                                e.g. MyProgram
// usingStatements [usingStatement]
//                  usingStatement                              e.g. System.Collections.Generic
// service.Area                                                 e.g. MyArea
// service.SubDirectories [subDir]
//                         subDir                               e.g. MyDir
// service.GenericTypeParameters [genericTypeParameter]
//                                genericTypeParameter          e.g. T
// service.Methods [method]
//                  method.Identifier                           e.g. MyMethod
//                  method.Modifiers [modifier]
//                                    modifier                  e.g. public
//                  method.ReturnType                           e.g. void
//                  method.TypeParameters [param]
//                                         param.TypeParam  e.g. T
//                  method.ArgumentList [arg]
//                                       arg.Type               e.g. string
//                                       arg.Identifier         e.g. myString
ServiceClass(rootNamespace, usingStatements, service) ::= <<
<usingStatements:{usingValue|using <usingValue>;
}>
<ServiceNamespace(rootNamespace, service.Area, service.SubDirectories)>
{
    public class <service.ServiceRootName>Service<TypeParamList(service.GenericTypeParameters)> <\\>
: I<service.ServiceRootName>Service<TypeParamList(service.GenericTypeParameters)><\\>
<GenericTypeParamConstraints(service.GenericTypeParameters)>
    {<service.Methods:{method|<\n>    <ClassMethod(method.Identifier, ["public", method.Modifiers], method.ReturnType, method.TypeParameters, method.ArgumentList)><\n>}>}
}
>>


// rootNamespace                                                e.g. MyProgram
// usingStatements [usingStatement]
//                  usingStatement                              e.g. System.Collections.Generic
// service.Area                                                 e.g. MyArea
// service.SubDirectories [subDir]
//                         subDir                               e.g. MyDir
// service.GenericTypeParameters [genericTypeParameter]
//                                genericTypeParameter.TypeParameter          e.g. 
// service.Methods [method]
//                  method.Identifier                           e.g. MyMethod
//                  method.ReturnType                           e.g. void
//                  method.TypeParameters [param]
//                                         param.TypeParam      e.g. T
//                  method.ArgumentList [arg]
//                                       arg.Type               e.g. string
//                                       arg.Identifier         e.g. myString
ServiceInterface(rootNamespace, usingStatements, service) ::= <<
<usingStatements:{usingValue|using <usingValue>;
}>
<ServiceNamespace(rootNamespace, service.Area, service.SubDirectories)>
{
    public interface I<service.ServiceRootName>Service<TypeParamList(service.GenericTypeParameters)><\\>
<GenericTypeParamConstraints(service.GenericTypeParameters)><\n>    {<service.Methods:{method|<\\>
<\n>    <InterfaceMethod(method.Identifier, method.ReturnType, method.TypeParameters, method.ArgumentList)><\n>}>}
}
>>


// rootNamespace        e.g. MyProgram
// area                 e.g. MyArea
// subDirs [subDir]
//          subDir      e.g. MyDir
ServiceNamespace(rootNamespace, area, subDirs) ::= <<
namespace <rootNamespace><if(area)>.Areas.<area><endif>.Services<subDirs:{subDir|.<subDir>}>
>>


// typeParams [param]
//             param.TypeParam                  e.g. T
TypeParamList(typeParams) ::= <<
<if(typeParams)>\<<typeParams:{param|<param.TypeParam>}; separator=", ">\><endif>
>>


// typeParams [param]
//             param.TypeParam                  e.g. T
//             param.Constraints [constraint]
//                                constraint    e.g. new()
GenericTypeParamConstraints(typeParams) ::= <<
<typeParams:{param|<if(param.Constraints)> where <param.TypeParam> : <param.Constraints; separator=", "><endif>}>
>>


// args [arg]
//       arg.Type           e.g. string
//       arg.Identifier     e.g. myString
ArgumentList(args) ::= <<
<args:{arg|<arg.Type> <arg.Identifier>}; separator=", ">
>>


// identifier                                               e.g. MyMethod
// modifiers [modifier]
//            modifier                                      e.g. public
// returnType                                               e.g. void
// genericTypeParams [typeParam]
//                    typeparam.TypeParam               e.g. T
//                    typeParam.Constraints [constraint]
//                                           constraint     e.g. new()
// args [arg]
//       arg.Type           e.g. string
//       arg.Identifier     e.g. myString
ClassMethod(identifier, modifiers, returnType, genericTypeParams, args) ::= <<
<modifiers:{modifier|<modifier> }><returnType> <identifier><TypeParamList(genericTypeParams)>(<ArgumentList(args)>)<GenericTypeParamConstraints(genericTypeParams)>
{

}
>>


// identifier                                               e.g. MyMethod
// returnType                                               e.g. void
// genericTypeParams [typeParam]
//                    typeparam.TypeParam               e.g. T
//                    typeParam.Constraints [constraint]
//                                           constraint     e.g. new()
// args [arg]
//       arg.Type                                           e.g. string
//       arg.Identifier                                     e.g. myString
InterfaceMethod(identifier, returnType, genericTypeParams, args) ::= <<
<returnType> <identifier><TypeParamList(genericTypeParams)>(<ArgumentList(args)>)<GenericTypeParamConstraints(genericTypeParams)>;
>>


// serviceCollection                                                                e.g. services
// service.Lifespan                                                                 e.g. Scoped
// service.ServiceRootName                                                          e.g. MyRootName
// service.GenericTypeParameters [genericTypeParameter]
//                                genericTypeParameter.TypeParameter                e.g. T
//                                genericTypeParameter.Constraints [constraint]
//                                                                  constraint      e.g. new()
AddServiceToServiceCollection(serviceCollection, service) ::= <<
<serviceCollection>.Add<service.Lifespan; null="Scoped"><if(service.GenericTypeParameters)><\\>
(typeof(I<service.ServiceRootName>Service\<\>), typeof(<service.ServiceRootName>Service\<\>))<\\>
<else>\<I<service.ServiceRootName>Service, <service.ServiceRootName>Service\>()<endif>;
>>

// accessibility            e.g. private
// modifiers [modifier]
//            modifier      e.g. readonly
// type                     e.g. IMyService
// identifier               e.g. _myService
ClassMember(accessibility, modifiers, type, identifier) ::= <<
<accessibility><modifiers:{modifier| <modifier>}> <type> <identifier>;
>>


// controller.Name                                      e.g. MyController
// controller.Services [service]
//                      service.Type                    e.g. IMyService
//                      service.TypeParamIdentifier     e.g. myService
//                      service.PrivateIdentifier       e.g. _myService
ControllerConstructorWithServiceInjection(controller) ::= <<
<controller.Services:{service|<ClassMember("private", ["readonly"], service.Type, service.PrivateIdentifier)><\n>}>
public <controller.Name>(<controller.Services:{service|<service.Type> <service.TypeParamIdentifier>}; separator=",\n">)
{
    <controller.Services:{service|<service.PrivateIdentifier> = <service.TypeParamIdentifier>;}; separator="\n">
}
>>

